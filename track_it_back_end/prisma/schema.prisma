generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  email                  String          @unique
  username               String
  password               String
  comments               Comment[]
  notifications          Notification[]
  triggeredNotifications Notification[]  @relation("TriggeredNotifications")
  projects               UserOnProject[]
  tasks                  Task[]
  Project                Project[]

  @@map("user")
}

model Project {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  name          String
  createdBy     String          @map("created_by")
  user          User            @relation(fields: [createdBy], references: [id])
  boards        Board[]
  labels        Label[]
  users         UserOnProject[]
  notifications Notification[]

  @@map("project")
}

model UserOnProject {
  userId    String  @map("user_id")
  projectId String  @map("project_id")
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role?

  @@id([userId, projectId])
  @@map("user_on_project")
}

model Board {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns   Column[]

  @@map("board")
}

model Column {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  position  Int
  boardId   String   @map("board_id")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("column")
}

model Task {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  title       String
  description String?
  createdBy   String        @map("created_by")
  columnId    String        @map("column_id")
  comments    Comment[]
  labels      LabelOnTask[]
  column      Column        @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [createdBy], references: [id])

  @@map("task")
}

model Label {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  color     String        @db.VarChar(7)
  projectId String        @map("project_id")
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     LabelOnTask[]

  @@map("label")
}

model LabelOnTask {
  labelId String @map("label_id")
  taskId  String @map("task_id")
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([labelId, taskId])
  @@map("label_on_task")
}

model Notification {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  message         String
  type            NotificationType
  isRead          Boolean          @default(false) @map("is_read")
  userId          String           @map("user_id")
  projectId       String           @map("project_id")
  entityId        String?          @map("entity_id") // ID задачи, комментария и т.д.
  entityType      String?          @map("entity_type") // task, comment, board и т.д.
  triggeredBy     String?          @map("triggered_by") // ID пользователя, который вызвал действие
  user            User             @relation(fields: [userId], references: [id])
  project         Project          @relation(fields: [projectId], references: [id])
  triggeredByUser User?            @relation("TriggeredNotifications", fields: [triggeredBy], references: [id])

  @@map("notification")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String
  userId    String   @map("user_id")
  taskId    String   @map("task_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment")
}

enum Role {
  admin
  editor
}

enum NotificationType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  COMMENT_CREATED
  BOARD_CREATED
  BOARD_UPDATED
  BOARD_DELETED
  COLUMN_CREATED
  COLUMN_UPDATED
  COLUMN_DELETED
  USER_JOINED_PROJECT
  USER_LEFT_PROJECT
  LABEL_CREATED
  LABEL_UPDATED
  LABEL_DELETED
}
