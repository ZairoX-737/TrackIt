generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  email         String         @unique
  username      String
  password      String
  comments      Comment[]
  notifications Notification[]
  projects      Project[]
  tasks         Task[]

  @@map("user")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique
  createdBy String   @map("created_by")
  boards    Board[]
  user      User     @relation(fields: [createdBy], references: [id])

  @@map("project")
}

model Board {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns   Column[]

  @@map("board")
}

model Column {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  position  Int
  boardId   String   @map("board_id")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("column")
}

model Task {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  title       String
  description String?
  status      String?       @db.VarChar(50)
  createdBy   String        @map("created_by")
  columnId    String        @map("column_id")
  priority    Priority?
  comments    Comment[]
  labels      LabelOnTask[]
  column      Column        @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [createdBy], references: [id])

  @@map("task")
}

model Label {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  color     String        @db.VarChar(7)
  tasks     LabelOnTask[]

  @@map("label")
}

model LabelOnTask {
  labelId String @map("label_id")
  taskId  String @map("task_id")
  label   Label  @relation(fields: [labelId], references: [id])
  task    Task   @relation(fields: [taskId], references: [id])

  @@id([labelId, taskId])
  @@map("label_on_task")
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String
  userId    String   @map("user_id")
  taskId    String   @map("task_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment")
}

enum Priority {
  low
  medium
  high
}
